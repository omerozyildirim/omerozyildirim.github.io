function getParameterByName(n) {
	n = n.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	var i = new RegExp("[\\?&]" + n + "=([^&#]*)"),
		t = i.exec(location.search);
	return t == null ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
}

function stringFormat(n) {
	for (i = 1; i < arguments.length; i++) n = n.replace("{" + (i - 1) + "}", arguments[i]);
	return n
}

function setCookie(n, t, i) {
	var r, u;
	i ? (r = new Date, r.setTime(r.getTime() + i * 864e5), u = "; expires=" + r.toGMTString()) : u = "";
	document.cookie = n + "=" + t + u + "; path=/"
}

function getCookie(n) {
	for (var t, r = n + "=", u = document.cookie.split(";"), i = 0; i < u.length; i++) {
		for (t = u[i]; t.charAt(0) == " ";) t = t.substring(1, t.length);
		if (t.indexOf(r) == 0) return t.substring(r.length, t.length)
	}
	return null
}

function deleteCookie(n) {
	setCookie(n, "", -1)
}

function isMobile() {
	return navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i) || navigator.userAgent.match(/Opera Mini/i) || navigator.userAgent.match(/IEMobile/i) ? !0 : !1
}

function bookmarksite() {
	"sidebar" in window && "addPanel" in window.sidebar ? window.sidebar.addPanel(location.href, document.title.replace("|", "-"), "") : /*@cc_on!@*/ !1 ? window.external.AddFavorite(location.href, document.title.replace("|", "-")) : alert("Lütfen " + (navigator.userAgent.toLowerCase().indexOf("mac") != -1 ? "Command/Cmd" : "CTRL") + " + D ile Sýk Kullanýlanlar kýsmýna ekleyiniz.")
}

function getHostName(n) {
	if (n) return "http://sehirharitasi.ibb.gov.tr/";
	var t = window.location.hostname == "localhost";
	return t ? window.location.protocol + "//localhost/" : window.location.protocol + "//" + window.location.host + "/"
}

function setFullScreen(n) {
	var t;
	isFullScreenEnabled() && (n.msFullscreenElement || n.fullscreenElement || n.mozFullScreenElement || n.webkitFullscreenElement ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : (t = new ActiveXObject("WScript.Shell"), t.sendKeys("{F11}")) : n.documentElement.msRequestFullscreen ? n.documentElement.msRequestFullscreen() : n.documentElement.requestFullscreen ? n.documentElement.requestFullscreen() : n.documentElement.mozRequestFullScreen ? n.documentElement.mozRequestFullScreen() : n.documentElement.webkitRequestFullscreen ? n.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : (t = new ActiveXObject("WScript.Shell"), t.SendKeys("{F11}")))
}

function isFullScreenEnabled() {
	return window != window.top ? !1 : document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled
}

function isFullScreen(n) {
	return isFullScreenEnabled() ? n.msFullscreenElement || n.fullscreenElement || n.mozFullScreenElement || n.webkitFullscreenElement ? !0 : !1 : !1
}

function downloadJSAtOnload(n) {
	var t = document.createElement("script");
	t.type = "text/javascript";
	t.src = n;
	t.async = !0;
	document.body.appendChild(t)
}

function XSSDefender(n) {
	return decodeURIComponent(n).replace(/[!'()]/g, escape).replace(/%20/g, " ").replace(/</g, "").replace(/>/g, "")
}
typeof Array.isArray == "undefined" && (Array.isArray = function(n) {
	return Object.prototype.toString.call(n) === "[object Array]"
});
String.prototype.Padding = function(n, t) {
	for (var i = this; i.length < t;) i = n + i;
	return i
};
String.prototype.turkishToUpper = function() {
	var n = this,
		t = {
			i: "Ý",
			"þ": "Þ",
			"ð": "Ð",
			"ü": "Ü",
			"ö": "Ö",
			"ç": "Ç",
			"ý": "I"
		};
	return n = n.replace(/(([iýþðüçö]))/g, function(n) {
		return t[n]
	}), n.toUpperCase()
};
String.prototype.turkishToLower = function() {
	var n = this,
		t = {
			"Ý": "i",
			I: "ý",
			"Þ": "þ",
			"Ð": "ð",
			"Ü": "ü",
			"Ö": "ö",
			"Ç": "ç"
		};
	return n = n.replace(/(([ÝIÞÐÜÇÖ]))/g, function(n) {
		return t[n]
	}), n.toLowerCase()
};
String.prototype.format = function(n) {
	var t = this;
	return t.replace(String.prototype.format.regex, function(t) {
		var i = parseInt(t.substring(1, t.length - 1));
		return i >= 0 ? n[i] : i === -1 ? "{" : i === -2 ? "}" : ""
	})
};
String.prototype.format.regex = new RegExp("{-?[0-9]+}", "g");
window.getPanaromaLatLon = function(n) {
	var i = parseFloat(n.split(",")[0]),
		r = parseFloat(n.split(",")[1]),
		t = OpenLayers.Layer.SphericalMercator.forwardMercator(r, i);
	info.lon = r;
	info.lat = i;
	info.panoramaActive = !0;
	var u = 180,
		e = "<b>Panorama<\/b><br/>Görüntüleri paylaþýn<br/><br/><font style='opacity:.6' size=2px>" + r.toFixed(6) + " , " + i.toFixed(6) + "<\/font>",
		f = map.olmap.getPixelFromLonLat(new OpenLayers.LonLat(t.lon, t.lat));
	$("#bilgigetir").css({
		top: f.y - u,
		left: f.x - 145
	}).show();
	$("#bilgigetirContent").html(e);
	map.olmap.events.register("move", this, function() {
		if ($("#bilgigetir").css("display") == "block") {
			var n = map.olmap.getPixelFromLonLat(new OpenLayers.LonLat(t.lon, t.lat));
			$("#bilgigetir").css({
				top: n.y - u,
				left: n.x - 145
			}).show()
		}
	});
	InfoInitialize()
};
